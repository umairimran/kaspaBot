Satoshi Nakamoto invented Bitcoin in 2008, creating for the first time a trustless decentralized currency. Despite its many innovations, blockchain technology has some issues. This text investigates some of these issues, particularly how Bitcoin forks work and how they affect its security.

Bitcoin miners always mine blocks that point to the tip of the current chain. However, the situation can be more complex. The Bitcoin network occasionally experiences "forks," where a miner must decide between competing chains. For example, if a miner has a chain of four blocks A, B, C, D and then receives a new chain with blocks E and F, the miner must decide whether to extend block D or block F. The simplest solution would be to ignore blocks that do not extend the current tip, but this introduces another problem: what happens if a miner that was offline when blocks A-D were created receives blocks E and F first? If it follows the previous rule, it will mine on top of block F, while all other miners ignore its blocks, resulting in a split from the rest of the network.

To prevent such issues, miners follow the longest-chain rule, which states that an honest miner should always mine on the longest chain. In the example above, all miners, both up-to-date and those that join later, will mine on top of block D. The only exception to this rule occurs when there are two or more chains of equal length. This situation usually arises when one miner mines block D and another miner mines block E before being aware of block D. Although this occurrence is rare, it can happen due to the average block rate in the Bitcoin network being 10 minutes.

When miners encounter equal-length chains, each will mine on the first tip they see. This is a temporary condition that resolves once one of the miners successfully mines on top of one of the chains, allowing the longest-chain rule to be applied again.

Forks are rare because the blockchain is designed as a chain rather than a tree. The vast majority of Bitcoin blocks belong to the main chain, with only a limited number of forks occurring. The fork rate is influenced by two variables: the block creation rate and the network delay. The network delay is the time it takes for a block to be known to all miners. Bitcoin’s network delay is approximately 1 second, while a new block is created on average every 600 seconds (10 minutes). Since the average block creation time is significantly longer than the network delay, it is highly unlikely that a block will be mined while another block is still being propagated.

The longest-chain rule makes the network vulnerable to history rewrites if an attacker mines a chain longer than the honest chain after the fact. A history rewrite attack, often referred to as a reorganization (reorg), can be used for fraudulent payments. For instance, if Chuck pays Alice 2 BTC for a car, and Alice sees the transaction included in block D, she gives him the car. However, if Chuck later mines two consecutive blocks E and F on top of block C, using the same funds to pay himself, all miners will abandon block D and start extending block F, leaving Alice without her bitcoin and her car. This scenario exemplifies a double spend attack.

To protect against such attacks, Alice can wait for several blocks to be built on top of block D before giving Chuck the car. If she sees 10 blocks built on top of block D without any forks, she can be reasonably assured that Chuck will not successfully build a competing chain of 10 blocks. However, if Chuck controls more than 51% of the mining power, he can successfully execute a reorg regardless of how long Alice waits, as his block creation rate would exceed that of all other miners combined. The 51% reorg attack represents a fundamental flaw in all proof-of-work systems: the longest-chain rule cannot differentiate between honest and malicious miners, allowing a malicious miner with sufficient computational power to rewrite history.

Research by Yonatan Sompolinsky and Aviv Zohar has shown that the 51% attack threshold can be reduced when increasing Bitcoin’s throughput. Currently, Bitcoin’s throughput is about 7 transactions per second, with blocks limited to approximately 2.3 MB, allowing for around 4,000 transactions per block. If Bitcoin were to scale to Visa levels, processing 2,000 transactions per second, we would expect blocks to be 285 times larger (655 MB). This naive calculation suggests that the network delay could increase from 1 second to 285 seconds.

In a network with a 285-second delay and an average block creation rate of one block every 600 seconds, there is a 0.475 chance that another block will be created. This means that nearly 50% of the blocks could belong to forks. If an attacker wants to double spend a transaction in block B, they would only need to create a chain of 7 blocks instead of 10. To sustain a continuous reorg attack, the attacker must create blocks faster than the main chain but not faster than the entire network. If half of the blocks are forked, only two-thirds will be included in the main chain, allowing an attacker to sustain an attack with only 33% of the hashing power.

Thus, increasing Bitcoin’s throughput can make it more vulnerable to attacks, highlighting a significant problem and one of the main reasons why Bitcoin’s block size remains small. There is a trade-off between Bitcoin’s throughput and security; as throughput increases, the number of forks rises, and the threshold for reorg attacks can drop below 50%.