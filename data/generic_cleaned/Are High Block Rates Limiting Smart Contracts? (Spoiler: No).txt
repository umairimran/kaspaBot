In recent weeks, a supposed counterargument to the usability of Kaspa has been circulating, claiming that high block rates limit the functionality of smart contracts. The argument suggests that increased block throughput implies more processing, making it unfeasible for nodes to handle complex functionalities. I have never taken this argument seriously, as it lacks substantiation. However, it was brought up by Kadena’s director of engineering, Doug Beardsley, during one of their periodic Office Hours Twitter spaces.

While I appreciate Doug's contribution to the discussion, I disagree with much of what he said. The purpose of this rebuttal is to present my objections in detail. This is not intended as a confrontation, but rather as an explanation to our community and users regarding why this criticism is not constructive.

I have made every effort to make this post self-contained, but readers are welcome to listen to the recording, starting from about 16:00. A technical note: the order in which I address the points is not the order they were originally made in the talk; I present them in decreasing order of annoyance.

The argument that irked me the most is the distinction between “a smart-contract blockchain” and “a cryptocurrency.” The implicit assumption here is that a blockchain must make a choice between the two. This is patently false: any network can allocate some of its throughput for smart contracts and the rest for simple transactions. Downscaling smart contract processing speed does not necessitate downscaling the entire network.

One argument made in the space is that “30-second block times are a nice sweet spot between too fast and too slow.” For the sake of discussion, let us assume this is correct. If the “best” block delay for processing transactions is indeed 30 seconds, what prevents any technology capable of higher throughput from designating every 30th block as a “smart-contract block” and the remaining 29 blocks as “transaction blocks”? This way, we can enjoy the best of both worlds: our cryptocurrency remains fast while our smart contracts operate at optimal speed. The only rational reason I see for any technology to avoid this path is if they cannot support shorter confirmation times.

The second problematic argument is the “sweet spot” argument regarding the 30-second block time as the “correct” trade-off between speed and functionality. The claim is that we cannot make block times arbitrarily slow because we cannot predict how long they would take to process when they carry arbitrary code, necessitating a large margin of error. This argument annoys me because it presents the 30-second confirmation time as a choice rather than a limitation of the system. All systems have limitations, and great engineers find ways to work around them. However, presenting a limitation imposed by the protocol as conveniently optimal is misleading. Why bother upscaling the network if we can simply declare Bitcoin's original 10-minute block delay as a “nice sweet spot”?

Let us illustrate this with a thought experiment: suppose someone at Kadena develops a solution that allows them to reduce confirmation times to a millisecond. They could either try to make smart contracts work as fast as possible without sacrificing functionality or say, “30 seconds is a nice trade-off, no reason to change that.” Most would agree that the first option is the reasonable one. Why limit yourself to 30 seconds when you might achieve better results? While estimating the computational costs of arbitrary code is challenging, “30 seconds” is not a magic number, and quicker response times may be attainable without compromising functionality or security.

Kaspa’s current block rate is 1 block per second (bps). After the Rust rewrite is complete, we intend to increase it to 10 bps and gradually raise it to 32 bps, with aspirations of reaching 100 bps, as noted by Dr. Sompolinsky. Could we process 10 blocks of smart contracts per second? Probably not. Could we process 1 block of smart contracts per second? Likely yes. Could we process 1 block of smart contracts every five seconds? Almost definitely. This is without even considering the possibility of applying roll-ups, which defer most of the processing overhead off-chain.

The key point is that processing power is the only limitation, whereas in other technologies, the limitation is imposed by the protocol. This positions us uniquely as the first pure Proof of Work (PoW) blockchain capable of testing how fast smart contracts can potentially operate.

The discourse has become so focused on the consequences of fast confirmation times that it has neglected the equally important consequences of slow confirmation times. While there are no convincing arguments against fast confirmations, it is easy to explain why slow confirmations are a handicap. 

Consider a hypothetical example: a user of WhateverCoin (WC) creates a smart contract that awards 10,000 WC based on sequential messages. The first user to post “one” receives one WC, then “two,” and so on. Processing this contract requires waiting for confirmation ten thousand times, as it cannot award the user posting “forty-two” before confirming “forty-one,” which must wait for “forty,” and so forth. This example, while simplistic, illustrates the sequential behavior that can occur in many applications, such as decentralized exchanges.

Another argument that raised my eyebrows was the comparison between confirmation times and stock exchange closures. The claim was that minute-long confirmation times are superior to the days-long confirmations of stock markets and credit card companies, and that stock exchanges use “decades-old techniques” to create the illusion of fast confirmations. 

As far as I know, traditional finance systems rely on trust, centralization, and liquidity. When you buy stock on an exchange, the platform aggregates transactions throughout the day. This is possible because the platform centralizes many transactions, users trust the platform to include their transactions before the stock exchange closes, and the platform has liquidity to lend to users for transactions that have not yet been finalized.

Removing centralization and trust from the equation is not as trivial as it may seem. If it were possible, we would not need blockchains at all. If Kadena has a solution that allows for safely and trustlessly “confirming” a transaction that is not actually confirmed yet, it must involve significant ingenuity. To me, it sounds impossible, as there is no centralized third party with the liquidity to cover discrepancies in case of a false positive. I see no difference between creating the illusion of a fast confirmation and actually reducing confirmation times unless there is someone to cover the costs when the estimation is wrong.

The Robinhood example illustrates the dangers of relying on an untrustworthy service provider. It exemplifies why actual control is desirable. Current platforms do not reduce confirmation times because they do not need to; their reputation and high liquidity solve the problem more easily.

In conclusion, I remain skeptical of the assertion that a 100 ms block time is not feasible. We will see.